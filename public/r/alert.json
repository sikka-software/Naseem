{
  "name": "alert",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useRef, useState, useEffect } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"./button\";\n\ntype AlertTypes = {\n  severity?:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\"\n    | \"none\"\n    | \"hyper\"\n    | \"oceanic\";\n  /** The title of the alert placed above the text of the alert. Can be used alone */\n  title?: React.ReactNode;\n  /** The text of the alert placed below the title of the alert. Can be used alone */\n  text: React.ReactNode;\n  /** The duration for the alert to stay on the screen */\n  duration?: number;\n  direction?: \"ltr\" | \"rtl\";\n  actions?: [\n    {\n      label: string;\n      onClick: () => void;\n      variant:\n        | \"outline\"\n        | \"link\"\n        | \"default\"\n        | \"destructive\"\n        | \"secondary\"\n        | \"ghost\";\n    },\n  ];\n  /** Removes the close button */\n  persistent?: boolean;\n  icon?: React.ReactNode;\n  classNames?: {\n    root?: string;\n    content?: string;\n    title?: string;\n    text?: string;\n    actions?: string;\n    icon?: string;\n    closeButton?: string;\n  };\n  onAlertClosed?: () => void;\n  noDestroy?: boolean;\n};\n\nexport const Alert: React.FunctionComponent<AlertTypes> = ({\n  direction = \"ltr\",\n  severity = \"none\",\n  duration,\n  icon,\n  classNames,\n  ...props\n}) => {\n  const alertRef = useRef<HTMLDivElement>(null);\n  const [closed, setClosed] = useState(false);\n\n  useEffect(() => {\n    if (duration) {\n      //To change opacity and hide the component\n      const timeoutHide = setTimeout(() => {\n        setClosed(true);\n      }, duration);\n      //To destroy the component after hiding it\n      const timeoutDestroy = setTimeout(() => {\n        setClosed(true);\n        if (alertRef?.current) {\n          alertRef?.current.removeChild(alertRef?.current.children[0]);\n        }\n      }, duration + 1000);\n\n      return () => {\n        clearTimeout(timeoutHide);\n        clearTimeout(timeoutDestroy);\n      };\n    }\n  }, [duration]);\n\n  const closeButtonStyle = {\n    none: \"\",\n    info: \"\",\n    warning: \"\",\n    error: \"\",\n    success: \"\",\n    hyper: \"\",\n    oceanic: \"\",\n  };\n  const styleVariant = {\n    none: \"bg-background border\",\n    info: \"text-info-foreground bg-info/90\",\n    warning: \"text-warning-foreground bg-warning/90\",\n    error: \"text-destructive-foreground bg-destructive/90\",\n    success: \"text-success-foreground bg-success/90\",\n    hyper:\n      \"text-white bg-gradient-to-tl from-pink-700 via-red-500 to-yellow-600 \",\n    oceanic:\n      \"text-white bg-gradient-to-bl from-green-500 via-blue-700 to-purple-500\",\n  };\n\n  return (\n    <div ref={alertRef} className=\"w-full\">\n      <div\n        data-testid=\"alert\"\n        aria-label=\"Alert\"\n        role=\"alert\"\n        dir={direction}\n        className={cn(\n          \"relative mb-4 flex flex-col rounded p-4 text-sm transition-all\",\n          styleVariant[severity],\n          closed ? \"opacity-0\" : \"opacity-100\",\n          classNames?.root\n        )}\n      >\n        <div className=\"flex flex-row\">\n          {icon && (\n            <div\n              className={cn(\n                direction === \"rtl\" ? \"pt-1 pl-2\" : \"pt-1 pr-2\",\n                classNames?.icon\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          <div className={cn(\"flex flex-col\", classNames?.content)}>\n            <span\n              className={cn(\n                \"font-bold\",\n                direction === \"rtl\" ? \"ml-8\" : \"mr-8\",\n                classNames?.title\n              )}\n            >\n              {props.title}\n            </span>\n            <span\n              className={cn(\n                direction === \"rtl\" ? \"ml-8\" : \"mr-8\",\n                props.persistent ? \"w-full\" : \"w-[calc(100% - 40px)]\",\n                classNames?.text\n              )}\n            >\n              {props.text}\n            </span>\n            {props.actions && (\n              <div\n                className={cn(\"mt-2 flex flex-row gap-2\", classNames?.actions)}\n              >\n                {props.actions.map((act, index) => (\n                  <Button\n                    key={index}\n                    variant={act.variant}\n                    onClick={act.onClick}\n                  >\n                    {act.label}\n                  </Button>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        {!props.persistent && (\n          <button\n            type=\"button\"\n            data-dismiss-target=\"#alert-default\"\n            aria-label=\"Close\"\n            className={cn(\n              \"rounded-inner absolute top-2 inline-flex h-9 w-9 items-center justify-center p-1.5 transition-all hover:text-gray-900\",\n              closeButtonStyle[severity],\n              direction === \"rtl\" ? \"left-2\" : \"right-2\",\n              classNames?.closeButton\n            )}\n            onClick={() => {\n              if (props.onAlertClosed) {\n                props.onAlertClosed();\n              }\n              if (!props.noDestroy) {\n                setClosed(true);\n                setTimeout(() => {\n                  if (alertRef?.current) {\n                    alertRef?.current.removeChild(\n                      alertRef?.current.children[0]\n                    );\n                  }\n                }, 200);\n              }\n            }}\n          >\n            <span className=\"sr-only\">Close</span>\n            <svg\n              aria-label=\"Close Icon\"\n              aria-hidden=\"true\"\n              className=\"h-5 w-5\"\n              fill=\"currentColor\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                clipRule=\"evenodd\"\n              ></path>\n            </svg>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n",
      "path": "/components/naseem-ui/elements/alert.tsx",
      "target": "/components/ui/alert.tsx"
    }
  ]
}