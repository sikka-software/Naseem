{
  "name": "button",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { HelperText } from \"@/components/naseem-ui/elements/helper-text\";\nimport { Label, LabelProps } from \"@/components/naseem-ui/elements/label\";\nimport { Loading } from \"@/components/naseem-ui/elements/loading\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center select-none rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        light: \"bg-primary/20 text-primary hover:bg-primary/40\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        combobox: \"bg-background border\",\n        neoBrutalism: \"neo-brutalism\",\n        // \"cursor-pointer transition-all uppercase font-mono  dark:bg-black font-bold py-2 px-4 rounded border-2 border-primary shadow-color-primary transition-[transform_50ms, box-shadow_50ms] active:translate-x-0.5 active:translate-y-0.5 active:shadow-color-primary-active shadow-color-primary active:shadow-color-primary-active\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        heightless: \"px-4 py-4\",\n        xs: \"h-fit min-h-[25px] py-1 text-[10px] px-2 \",\n        sm: \"h-9  text-[11px] rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        xl: \"h-14 rounded-md px-10\",\n        icon: \"h-10 w-10\",\n        smallIcon: \"h-7 w-7\",\n      },\n    },\n    defaultVariants: { variant: \"default\", size: \"default\" },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  centered?: boolean;\n  isLoading?: boolean;\n  label?: string;\n  labelProps?: LabelProps;\n  /** The small red text under the input field to show validation.   */\n  helperText?: React.ReactNode;\n  showHelperText?: boolean;\n  /**\n   * If true, the button will include a label and helper text. This is useful for forms where the button is part of the form.\n   */\n  asInput?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      label,\n      variant,\n      size,\n      // asChild = false,\n      centered = true,\n      isLoading,\n      children,\n      labelProps,\n      showHelperText = false,\n      asInput = false,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = \"button\";\n\n    // Determine the color for the Loading component based on the variant\n    const loadingColor =\n      variant === \"outline\" || variant === \"ghost\" || variant === \"neoBrutalism\"\n        ? \"bg-primary\"\n        : \"bg-primary-foreground\";\n\n    if (asInput) {\n      return (\n        <div className=\"flex flex-col gap-2\">\n          {label && <Label {...labelProps}>{label}</Label>}\n          <Comp\n            className={cn(\n              buttonVariants({ variant, size, className }),\n              centered && \"justify-center\"\n            )}\n            ref={ref}\n            {...props}\n          >\n            {isLoading ? (\n              <Loading\n                design={\n                  size === \"icon\" || size === \"smallIcon\"\n                    ? \"spinner\"\n                    : \"dots-pulse\"\n                }\n                themeMode={variant === \"outline\" ? \"light\" : \"dark\"}\n                color={loadingColor}\n                size={size === \"sm\" || size === \"xs\" ? \"xs\" : \"button\"}\n              />\n            ) : (\n              children\n            )}\n          </Comp>\n          {showHelperText && <HelperText helperText={props.helperText} />}\n        </div>\n      );\n    } else {\n      return (\n        <Comp\n          className={cn(\n            buttonVariants({ variant, size, className }),\n            centered && \"justify-center\"\n          )}\n          ref={ref}\n          {...props}\n        >\n          {isLoading ? (\n            <Loading\n              design={\n                size === \"icon\" || size === \"smallIcon\"\n                  ? \"spinner\"\n                  : \"dots-pulse\"\n              }\n              themeMode={variant === \"outline\" ? \"light\" : \"dark\"}\n              color={loadingColor}\n              size={size === \"sm\" || size === \"xs\" ? \"xs\" : \"button\"}\n            />\n          ) : (\n            children\n          )}\n        </Comp>\n      );\n    }\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "path": "/components/naseem-ui/elements/button.tsx",
      "target": "/components/ui/button.tsx"
    }
  ]
}