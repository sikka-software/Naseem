{
  "name": "currency-input",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "input",
    "sar-symbol"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { SARSymbol } from \"@/components/naseem-ui/elements/sar-symbol\";\nimport { useEffect, useState, useRef } from \"react\";\n\n// Helper function to convert Arabic numerals to English numerals\nconst convertArabicToEnglishNumerals = (value: string): string => {\n  const arabicNumerals = [\"٠\", \"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\"];\n  return value\n    .split(\"\")\n    .map((char) => {\n      if (char === \".\") return char; // Preserve periods\n      const index = arabicNumerals.indexOf(char);\n      return index !== -1 ? index.toString() : char;\n    })\n    .join(\"\");\n};\n\ninterface CurrencyInputProps\n  extends Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"value\"\n  > {\n  value?: number;\n  onChange?: (value: number | undefined) => void;\n  showCurrencySymbol?: boolean;\n}\n\nexport function CurrencyInput({\n  value,\n  onChange,\n  showCurrencySymbol = true,\n  ...props\n}: CurrencyInputProps) {\n  const [inputText, setInputText] = useState(value?.toFixed(2) || \"\");\n  const isUserInput = useRef(false);\n\n  // Update input text when value prop changes, but only if it's not from user input\n  useEffect(() => {\n    if (!isUserInput.current && value !== undefined) {\n      setInputText(value.toFixed(2));\n    }\n    isUserInput.current = false;\n  }, [value]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    isUserInput.current = true;\n    const newValue = e.target.value;\n\n    // Allow empty value\n    if (newValue === \"\") {\n      setInputText(\"\");\n      onChange?.(undefined);\n      return;\n    }\n\n    // Split by decimal point to check decimal places\n    const parts = newValue.split(\".\");\n\n    // If we have decimal places, ensure no more than 2\n    if (parts.length === 2 && parts[1].length > 2) {\n      return;\n    }\n\n    // Allow empty or valid number format\n    if (!/^[0-9٠-٩]*\\.?[0-9٠-٩]*$/.test(newValue)) {\n      return;\n    }\n\n    // Convert to English numerals for display\n    const converted = convertArabicToEnglishNumerals(newValue);\n    setInputText(converted);\n\n    const num = converted ? Number(converted) : undefined;\n    if (!isNaN(num as number)) {\n      onChange?.(num);\n    }\n  };\n\n  const handleBlur = () => {\n    // Format to always show 2 decimal places on blur if we have a value\n    if (inputText) {\n      const num = Number(inputText);\n      if (!isNaN(num)) {\n        isUserInput.current = true;\n        setInputText(num.toFixed(2));\n      }\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <Input\n        type=\"text\"\n        inputMode=\"decimal\"\n        placeholder=\"0.00\"\n        className=\"currency-input\"\n        value={inputText}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        {...props}\n      />\n      {showCurrencySymbol && (\n        <span className=\"text-muted-foreground absolute end-2 top-1/2 -translate-y-1/2\">\n          <SARSymbol className=\"size-4\" />\n        </span>\n      )}\n    </div>\n  );\n}\n",
      "path": "/components/naseem-ui/elements/currency-input.tsx",
      "target": "/components/ui/currency-input.tsx"
    }
  ]
}