{
  "name": "image-viewer-basic",
  "type": "registry:component",
  "dependencies": [
    "@radix-ui/react-dialog",
    "lucide-react",
    "react-zoom-pan-pinch"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n} from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\n\nconst DEFAULT_PLACEHOLDER_URL =\n  \"https://raw.githubusercontent.com/sikka-software/naseem/refs/heads/main/public/placeholders/headphone-2.jpg\";\n\ninterface ImageViewerProps {\n  className?: string;\n  classNameImageViewer?: string;\n  classNameThumbnailViewer?: string;\n  imageTitle?: string;\n  imageUrl: string;\n  thumbnailUrl?: string;\n  placeholderUrl?: string;\n  Placeholder?: React.ComponentType<{ className?: string }>;\n}\n\nconst ImageViewer_Basic = ({\n  className,\n  classNameImageViewer,\n  classNameThumbnailViewer,\n  imageTitle,\n  imageUrl,\n  thumbnailUrl,\n  placeholderUrl = DEFAULT_PLACEHOLDER_URL,\n}: ImageViewerProps) => {\n  const handleImgError = (event: React.SyntheticEvent<HTMLImageElement>) => {\n    console.error(\"Image failed to load\", event.currentTarget.src);\n    event.currentTarget.src = placeholderUrl;\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <div className={cn(\"cursor-pointer\", className)}>\n          {/* You can swap this with your preferred image optization technique, like using  next/image */}\n          <img\n            src={thumbnailUrl || imageUrl}\n            alt={`${imageTitle ?? \"Image\"} - Preview`}\n            width=\"100%\"\n            height={300}\n            className={cn(\n              \"rounded-lg object-cover transition-opacity hover:opacity-90\",\n              classNameThumbnailViewer\n            )}\n            onError={handleImgError}\n          />\n        </div>\n      </DialogTrigger>\n      <DialogPortal>\n        <DialogOverlay className=\"fixed inset-0 z-50 bg-black/80\" />\n        <DialogContent className=\"bg-background fixed inset-0 z-50 flex flex-col items-center justify-center p-0\">\n          <DialogTitle className=\"sr-only\">{imageTitle}</DialogTitle>\n          <div className=\"relative flex h-screen w-screen items-center justify-center\">\n            <TransformWrapper\n              initialScale={1}\n              initialPositionX={0}\n              initialPositionY={0}\n            >\n              {() => (\n                <>\n                  <TransformComponent>\n                    {/* You can swap this with your preferred image optization technique, like using  next/image */}\n                    <img\n                      src={imageUrl}\n                      alt={`${imageTitle ?? \"Image\"} - Full`}\n                      className={classNameImageViewer}\n                      onError={handleImgError}\n                    />\n                  </TransformComponent>\n                </>\n              )}\n            </TransformWrapper>\n            <DialogClose asChild>\n              <button\n                className=\"absolute top-4 right-4 z-10 cursor-pointer rounded-full bg-black/50 p-2 text-white transition-colors hover:bg-black/70\"\n                aria-label=\"Close\"\n              >\n                <X className=\"size-6\" />\n              </button>\n            </DialogClose>\n          </div>\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n};\n\nexport default ImageViewer_Basic;\n",
      "path": "/components/commerce-ui/image-viewer/basic/image-viewer-basic.tsx",
      "target": "/components/commerce-ui/image-viewer-basic.tsx"
    }
  ]
}