{
  "name": "upvote-downvote-rating-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "@number-flow/react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "import { cn } from \"@/lib/utils\";\nimport { ThumbsUp, ThumbsDown } from \"lucide-react\";\nimport * as React from \"react\";\n\nconst UPVOTE_COLOR = \"#f93003\";\nconst DOWNVOTE_COLOR = \"#5817fb\";\nconst UPVOTE_POINTS = 1;\nconst DOWNVOTE_POINTS = 1;\n\nconst UpvoteDownvoteRating_01 = () => {\n  const [upvotes, setUpvotes] = React.useState(257);\n  const [downvotes, setDownvotes] = React.useState(31);\n  const [upvoted, setUpvoted] = React.useState(false);\n  const [downvoted, setDownvoted] = React.useState(true);\n\n  const handleVote = (type: \"upvote\" | \"downvote\") => {\n    if (type === \"upvote\") {\n      setUpvoted(!upvoted);\n      setUpvotes((prev) => prev + (upvoted ? -UPVOTE_POINTS : UPVOTE_POINTS));\n      if (downvoted) {\n        setDownvoted(false);\n        setDownvotes((prev) => prev - DOWNVOTE_POINTS);\n      }\n    } else {\n      setDownvoted(!downvoted);\n      setDownvotes(\n        (prev) => prev + (downvoted ? -DOWNVOTE_POINTS : DOWNVOTE_POINTS)\n      );\n      if (upvoted) {\n        setUpvoted(false);\n        setUpvotes((prev) => prev - UPVOTE_POINTS);\n      }\n    }\n  };\n\n  const formatNumber = (number: number) => {\n    return number >= 1000\n      ? (number / 1000).toFixed(1) + \"K\"\n      : number.toLocaleString();\n  };\n\n  const totalVotes = formatNumber(upvotes - downvotes);\n\n  return (\n    <div\n      className={cn(\n        \"items-middle flex flex-row items-center justify-between gap-0 rounded-full border\"\n      )}\n      style={{\n        backgroundColor: upvoted\n          ? UPVOTE_COLOR\n          : downvoted\n            ? DOWNVOTE_COLOR\n            : \"transparent\",\n      }}\n    >\n      <div\n        className=\"cursor-pointer rounded-full px-2 py-2 hover:motion-preset-shake\"\n        onClick={() => handleVote(\"upvote\")}\n      >\n        <ThumbsUp\n          size={20}\n          color=\"white\"\n          fill={upvoted ? \"white\" : \"transparent\"}\n        />\n      </div>\n      <div className=\"min-w-8 px-2 py-1 text-center text-white\">\n        <span>{totalVotes}</span>\n      </div>\n      <div\n        className=\"cursor-pointer rounded-full px-2 py-2 hover:motion-preset-shake\"\n        onClick={() => handleVote(\"downvote\")}\n      >\n        <ThumbsDown\n          size={20}\n          color=\"white\"\n          fill={downvoted ? \"white\" : \"transparent\"}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default UpvoteDownvoteRating_01;\n",
      "path": "/components/commerce-ui/upvote-downvote-rating/upvote-downvote-rating-03.tsx",
      "target": "/components/commerce-ui/upvote-downvote-rating-03.tsx"
    }
  ]
}